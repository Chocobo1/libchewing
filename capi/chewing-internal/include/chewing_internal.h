/*
 * Copyright (c) 2022
 *      libchewing Core Team. See ChangeLog for details.
 *
 * See the file "COPYING" for information on usage and redistribution
 * of this file.
 */

#ifndef chewing_internal_bindings_h
#define chewing_internal_bindings_h

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include "chewing_rs.h"

#define MAX_UTF8_SIZE 4

#define MAX_UTF8_BUF (MAX_UTF8_SIZE + 1)

#define BOPOMOFO_SIZE 4

#define MAX_BOPOMOFO_UTF8_BUF ((BOPOMOFO_SIZE * MAX_UTF8_SIZE) + 1)

#define PINYIN_SIZE 10

#define MAX_PHRASE_LEN 11

#define MAX_PHRASE_UTF8_BUF ((MAX_PHRASE_LEN * MAX_UTF8_SIZE) + 1)

#define MAX_PHONE_SEQ_LEN 50

#define MAX_PHONE_SEQ_BUF (MAX_PHONE_SEQ_LEN + 1)

#define MAX_PHONE_SEQ_UTF8_BUF ((MAX_PHONE_SEQ_LEN * MAX_UTF8_SIZE) + 1)

#define MIN_CHI_SYMBOL_LEN 0

#define MAX_CHI_SYMBOL_LEN (MAX_PHONE_SEQ_LEN - MAX_PHRASE_LEN)

#define MAX_INTERVAL (((MAX_PHONE_SEQ_LEN + 1) * MAX_PHONE_SEQ_LEN) / 2)

#define MAX_CHOICE 567

#define MAX_CHOICE_BUF 50

#define EASY_SYMBOL_KEY_TAB_LEN 36

#define AUX_PREFIX_LEN 3

#define MAX_SHOW_MSG_BUF ((MAX_UTF8_SIZE * (MAX_PHRASE_LEN + AUX_PREFIX_LEN)) + 1)

#define N_HASH_BIT 14

#define HASH_TABLE_SIZE (1 << N_HASH_BIT)

#define WORD_CHOICE 0

#define SYMBOL_CATEGORY_CHOICE 1

#define SYMBOL_CHOICE_INSERT 2

#define SYMBOL_CHOICE_UPDATE 3

typedef enum BOPOMOFO {
  BOPOMOFO_IGNORE,
  BOPOMOFO_ABSORB,
  BOPOMOFO_COMMIT,
  BOPOMOFO_KEY_ERROR,
  BOPOMOFO_ERROR,
  BOPOMOFO_NO_WORD,
  BOPOMOFO_OPEN_SYMBOL_TABLE,
} BOPOMOFO;

typedef enum KB {
  KB_DEFAULT,
  KB_HSU,
  KB_IBM,
  KB_GIN_YIEH,
  KB_ET,
  KB_ET26,
  KB_DVORAK,
  KB_DVORAK_HSU,
  KB_DACHEN_CP26,
  KB_HANYU_PINYIN,
  KB_THL_PINYIN,
  KB_MPS2_PINYIN,
  KB_CARPALX,
  KB_TYPE_NUM,
} KB;

enum UserUpdate
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
  USER_UPDATE_INSERT = 1,
  USER_UPDATE_MODIFY = 2,
  USER_UPDATE_FAIL = 4,
};
#ifndef __cplusplus
typedef uint8_t UserUpdate;
#endif // __cplusplus

typedef struct ChewingContext ChewingContext;

typedef struct ChewingData ChewingData;

typedef struct Phrase {
  char phrase[MAX_PHONE_SEQ_BUF];
  int freq;
} Phrase;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

extern int toPreeditBufIndex(struct ChewingData *pgdata, int pos);

extern int HaninSymbolInput(struct ChewingData *pgdata);

void rust_link_io(void);

struct ChewingContext *chewing_new(void);

void chewing_delete(struct ChewingContext *ctx);

void chewing_free(void *ptr);

int chewing_Reset(struct ChewingContext *ctx);

int chewing_set_KBType(struct ChewingContext *ctx, int kbtype);

int chewing_get_KBType(const struct ChewingContext *ctx);

char *chewing_get_KBString(const struct ChewingContext *ctx);

int chewing_KBStr2Num(const char *str);

void chewing_set_ChiEngMode(struct ChewingContext *ctx, int mode);

int chewing_get_ChiEngMode(const struct ChewingContext *ctx);

void chewing_set_ShapeMode(struct ChewingContext *ctx, int mode);

int chewing_get_ShapeMode(const struct ChewingContext *ctx);

void chewing_set_candPerPage(struct ChewingContext *ctx, int n);

int chewing_get_candPerPage(const struct ChewingContext *ctx);

void chewing_set_maxChiSymbolLen(struct ChewingContext *ctx, int n);

int chewing_get_maxChiSymbolLen(const struct ChewingContext *ctx);

void chewing_set_selKey(struct ChewingContext *ctx, const int *sel_keys, int len);

int *chewing_get_selKey(const struct ChewingContext *ctx);

void chewing_set_addPhraseDirection(struct ChewingContext *ctx, int direction);

int chewing_get_addPhraseDirection(const struct ChewingContext *ctx);

void chewing_set_spaceAsSelection(struct ChewingContext *ctx, int mode);

int chewing_get_spaceAsSelection(const struct ChewingContext *ctx);

void chewing_set_escCleanAllBuf(struct ChewingContext *ctx, int mode);

int chewing_get_escCleanAllBuf(const struct ChewingContext *ctx);

void chewing_set_autoShiftCur(struct ChewingContext *ctx, int mode);

int chewing_get_autoShiftCur(const struct ChewingContext *ctx);

void chewing_set_easySymbolInput(struct ChewingContext *ctx, int mode);

int chewing_get_easySymbolInput(const struct ChewingContext *ctx);

void chewing_set_phraseChoiceRearward(struct ChewingContext *ctx, int mode);

int chewing_get_phraseChoiceRearward(const struct ChewingContext *ctx);

void chewing_set_autoLearn(struct ChewingContext *ctx, int mode);

int chewing_get_autoLearn(const struct ChewingContext *ctx);

unsigned short *chewing_get_phoneSeq(const struct ChewingContext *ctx);

int chewing_get_phoneSeqLen(const struct ChewingContext *ctx);

int chewing_userphrase_enumerate(struct ChewingContext *ctx);

int chewing_userphrase_has_next(struct ChewingContext *ctx,
                                unsigned int *phrase_len,
                                unsigned int *bopomofo_len);

int chewing_userphrase_get(struct ChewingContext *ctx,
                           char *phrase_buf,
                           unsigned int phrase_len,
                           char *bopomofo_buf,
                           unsigned int bopomofo_len);

int chewing_userphrase_add(struct ChewingContext *ctx,
                           const char *phrase_buf,
                           const char *bopomofo_buf);

int chewing_userphrase_remove(struct ChewingContext *ctx,
                              const char *phrase_buf,
                              const char *bopomofo_buf);

int chewing_userphrase_lookup(struct ChewingContext *ctx,
                              const char *phrase_buf,
                              const char *bopomofo_buf);

int chewing_cand_list_first(struct ChewingContext *ctx);

int chewing_cand_list_last(struct ChewingContext *ctx);

int chewing_cand_list_has_next(struct ChewingContext *ctx);

int chewing_cand_list_has_prev(struct ChewingContext *ctx);

int chewing_cand_list_next(struct ChewingContext *ctx);

int chewing_cand_list_prev(struct ChewingContext *ctx);

int chewing_commit_preedit_buf(struct ChewingContext *ctx);

int chewing_clean_preedit_buf(struct ChewingContext *ctx);

int chewing_clean_bopomofo_buf(struct ChewingContext *ctx);

int chewing_phone_to_bopomofo(unsigned short phone, char *buf, unsigned short len);

int chewing_handle_Space(struct ChewingContext *ctx);

int chewing_handle_Esc(struct ChewingContext *ctx);

int chewing_handle_Enter(struct ChewingContext *ctx);

int chewing_handle_Del(struct ChewingContext *ctx);

int chewing_handle_Backspace(struct ChewingContext *ctx);

int chewing_handle_Tab(struct ChewingContext *ctx);

int chewing_handle_ShiftLeft(struct ChewingContext *ctx);

int chewing_handle_Left(struct ChewingContext *ctx);

int chewing_handle_ShiftRight(struct ChewingContext *ctx);

int chewing_handle_Right(struct ChewingContext *ctx);

int chewing_handle_Up(struct ChewingContext *ctx);

int chewing_handle_Home(struct ChewingContext *ctx);

int chewing_handle_End(struct ChewingContext *ctx);

int chewing_handle_PageUp(struct ChewingContext *ctx);

int chewing_handle_PageDown(struct ChewingContext *ctx);

int chewing_handle_Down(struct ChewingContext *ctx);

int chewing_handle_Capslock(struct ChewingContext *ctx);

int chewing_handle_Default(struct ChewingContext *ctx, int key);

int chewing_handle_CtrlNum(struct ChewingContext *ctx, int key);

int chewing_handle_ShiftSpace(struct ChewingContext *ctx);

int chewing_handle_DblTab(struct ChewingContext *ctx);

int chewing_handle_Numlock(struct ChewingContext *ctx, int key);

int chewing_commit_Check(const struct ChewingContext *ctx);

char *chewing_commit_String(const struct ChewingContext *ctx);

const char *chewing_commit_String_static(const struct ChewingContext *ctx);

char *chewing_buffer_String(const struct ChewingContext *ctx);

const char *chewing_buffer_String_static(const struct ChewingContext *ctx);

int chewing_buffer_Check(const struct ChewingContext *ctx);

int chewing_buffer_Len(const struct ChewingContext *ctx);

const char *chewing_bopomofo_String_static(const struct ChewingContext *ctx);

int chewing_bopomofo_Check(const struct ChewingContext *ctx);

int chewing_cursor_Current(const struct ChewingContext *ctx);

int chewing_cand_CheckDone(const struct ChewingContext *ctx);

int chewing_cand_TotalPage(const struct ChewingContext *ctx);

int chewing_cand_ChoicePerPage(const struct ChewingContext *ctx);

int chewing_cand_TotalChoice(const struct ChewingContext *ctx);

int chewing_cand_CurrentPage(const struct ChewingContext *ctx);

void chewing_cand_Enumerate(struct ChewingContext *ctx);

int chewing_cand_hasNext(struct ChewingContext *ctx);

char *chewing_cand_String(struct ChewingContext *ctx);

const char *chewing_cand_String_static(struct ChewingContext *ctx);

char *chewing_cand_string_by_index(struct ChewingContext *ctx, int index);

const char *chewing_cand_string_by_index_static(struct ChewingContext *ctx, int index);

int chewing_cand_choose_by_index(struct ChewingContext *ctx, int index);

int chewing_cand_open(struct ChewingContext *ctx);

int chewing_cand_close(struct ChewingContext *ctx);

void chewing_interval_Enumerate(struct ChewingContext *ctx);

int chewing_interval_hasNext(struct ChewingContext *ctx);

void chewing_interval_Get(struct ChewingContext *ctx, IntervalType *it);

int chewing_aux_Check(const struct ChewingContext *ctx);

int chewing_aux_Length(const struct ChewingContext *ctx);

char *chewing_aux_String(const struct ChewingContext *ctx);

const char *chewing_aux_String_static(const struct ChewingContext *ctx);

int chewing_keystroke_CheckIgnore(const struct ChewingContext *ctx);

int chewing_keystroke_CheckAbsorb(const struct ChewingContext *ctx);

int chewing_kbtype_Total(const struct ChewingContext *ctx);

void chewing_kbtype_Enumerate(struct ChewingContext *ctx);

int chewing_kbtype_hasNext(struct ChewingContext *ctx);

char *chewing_kbtype_String(struct ChewingContext *ctx);

const char *chewing_kbtype_String_static(struct ChewingContext *ctx);

int chewing_zuin_Check(const struct ChewingContext *ctx);

char *chewing_zuin_String(const struct ChewingContext *ctx, int *zuin_count);

int chewing_Init(const char *data_path, const char *hash_path);

void chewing_Terminate(void);

int chewing_Configure(struct ChewingContext *ctx, ChewingConfigData *pcd);

void chewing_set_hsuSelKeyType(struct ChewingContext *ctx, int mode);

int chewing_get_hsuSelKeyType(struct ChewingContext *ctx);

void rust_link_key2pho(void);

uint16_t UintFromPhone(const char *phone);

uint16_t UintFromPhoneInx(const int *ph_inx);

int PhoneFromUint(char *phone, size_t phone_len, uint16_t phone_num);

ptrdiff_t UintArrayFromBopomofo(uint16_t *phone_seq, size_t phone_len, const char *bopomofo_buf);

int GetPhoneLenFromUint(uint16_t phone_num);

void rust_link_path(void);

int get_search_path(char *path, size_t path_len);

int find_path_by_files(const char *search_path,
                       const char *const *files,
                       uint8_t *output,
                       size_t output_len);

void rust_link_utf8(void);

int ueStrLen(const char *str);

int ueBytesFromChar(unsigned char b);

int ueStrNBytes(const char *str, int n);

int ueStrNCpy(char *dest, const char *src, size_t n, int end);

char *ueStrSeek(char *src, size_t n);

const char *ueConstStrSeek(const char *src, size_t n);

const char *ueStrStr(const char *str, size_t _lstr, const char *substr, size_t _lsub);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus

#endif /* chewing_internal_bindings_h */
